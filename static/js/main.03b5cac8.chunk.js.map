{"version":3,"sources":["context/WeatherContext.js","components/Header.js","components/Dropdown.js","components/WeatherCard.js","components/Footer.js","components/Container.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherContext","createContext","defaultCity","WeatherProvider","children","useState","values","selectedCity","setSelectedCity","Provider","value","useWeather","useContext","Header","providedData","className","Dropdown","selectDOM","document","querySelector","citiesInTurkey","useEffect","id","findIndex","element","options","setAttribute","onChange","e","target","map","city","i","onClick","navigator","geolocation","getCurrentPosition","position","axios","coords","latitude","longitude","then","response","data","name","WeatherCard","coordinates","setCoordinates","weather","setWeather","apiKey","cityName","cityAPI","dailyAPI","lat","lon","coord","catch","err","classList","remove","add","daily","s","UNIX_TIMESTAMP","dt","Date","toString","split","src","icon","alt","description","toUpperCase","Math","floor","temp","min","max","Footer","getFullYear","href","Container","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+PAEMA,EAAiBC,0BACjBC,EAAc,aAEPC,EAAkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChC,EAAwCC,mBAASH,GAAjD,mBACMI,EAAS,CAAEC,aADjB,KAC+BC,gBAD/B,KACgDN,eAEhD,OACE,cAACF,EAAeS,SAAhB,CAAyBC,MAAOJ,EAAhC,SAAyCF,KAGhCO,EAAa,kBAAMC,qBAAWZ,ICA5Ba,MAXf,WACE,IAAMC,EAAeH,IACrB,OACE,8BACE,qBAAII,UAAU,iFAAd,wCAC8BD,EAAaP,mB,wBC6HlCS,MAhIf,WACE,IAAMC,EAAYC,SAASC,cAAc,uBACnCC,EAAiB,CACrB,QACA,gBACA,QACA,iBACA,SACA,SACA,UACA,SACA,aACA,iBACA,UACA,YACA,SACA,OACA,SACA,QACA,eACA,uBACA,WACA,UACA,kBACA,SACA,mBACA,WACA,UACA,iBACA,YACA,UACA,uBACA,UACA,QACA,UACA,SACA,gBACA,aACA,OACA,YACA,UACA,kBACA,qBACA,UACA,QACA,aACA,UACA,SACA,qBACA,SACA,aACA,WACA,gBACA,aACA,OACA,OACA,UACA,SACA,QACA,QACA,QACA,gBACA,QACA,UACA,UACA,sBACA,YACA,MACA,SACA,YACA,UACA,UACA,UACA,sBACA,SACA,mBACA,cACA,UACA,kBACA,SACA,aACA,QACA,WACA,YAEIN,EAAeH,IAuBrB,OAtBAU,qBAAU,WACR,IAAMC,EAAKF,EAAeG,WACxB,SAACC,GAAD,OAAaA,IAAYV,EAAaZ,eAExCgB,SACGC,cAAc,uBACdM,QAAQH,GAAII,aAAa,WAAY,OAiBxC,sBAAKX,UAAU,uCAAf,UACE,wBACEA,UAAU,qIACVY,SAAU,SAACC,GAAD,OAAOd,EAAaN,gBAAgBoB,EAAEC,OAAOnB,QAFzD,SAIGU,EAAeU,KAAI,SAACC,EAAMC,GAAP,OAClB,wBAAuBtB,MAAOqB,EAA9B,SACGA,GADWC,GAAK,QAKvB,cAAC,IAAD,CACEjB,UAAU,iEACVkB,QA3Bc,WAClBC,UAAUC,YAAYC,oBAAmB,SAACC,GACxCC,IAAM,qDAAD,OACkDD,EAASE,OAAOC,SADlE,gBACkFH,EAASE,OAAOE,UADlG,oDAEHC,MAAK,SAACC,GACN7B,EAAaN,gBAAgBmC,EAASC,KAAK,GAAGC,MAC1C5B,IACFA,EAAUP,MAAQiC,EAASC,KAAK,GAAGC,mBClC9BC,MArEf,WACE,IAAMhC,EAAeH,IACrB,EAAsCN,mBAAS,IAA/C,mBAAO0C,EAAP,KAAoBC,EAApB,KACA,EAA8B3C,mBAAS,IAAvC,mBAAO4C,EAAP,KAAgBC,EAAhB,KACMC,EAAS,mCACTC,EAAQ,UAAMtC,EAAaP,cAC3B8C,EAAO,4DAAwDD,EAAxD,kBAA0ED,GACjFG,EAAQ,8DAA0DP,EAAYQ,IAAtE,gBAAiFR,EAAYS,IAA7F,+DAAuJL,GA0BrK,OAzBA9B,qBAAU,WACRiB,IAAMe,GACHX,MAAK,SAACC,GACLK,EAAeL,EAASC,KAAKa,UAE9BC,OAAM,SAACC,OACVrB,IAAMgB,GACHZ,MAAK,SAACC,GACLO,EAAWP,EAASC,SAErBc,OAAM,SAACC,SACT,CAACN,EAASC,IACbjC,qBAAU,WACRH,SAASC,cAAc,WACrBD,SAASC,cAAc,UAAUyC,UAAUC,OAAO,iBACpD3C,SAASC,cAAc,WACrBD,SACGC,cAAc,UACdyC,UAAUE,IAAI,WAAY,wBAQ/B,oBAAI/C,UAAU,qGAAd,SACGkC,EAAQc,OACPd,EAAQc,MAAMjC,KAAI,SAACkC,EAAGhC,GAAJ,OAChB,qBACEV,GAAE,cAASU,EAAI,GAEfjB,UAAU,kDAHZ,UAKE,qBAAKA,UAAU,iCAAf,UAbWkD,EAcID,EAAEE,GAbd,IAAIC,KAAsB,IAAjBF,GAAuBG,WAAWC,MAAM,KAAK,MAezD,qBAAKtD,UAAU,yDAAf,SACE,qBACEuD,IAAG,4CAAuCN,EAAEf,QAAQ,GAAGsB,KAApD,WACHC,IAAI,iBAGR,qBAAKzD,UAAU,4BAAf,SACGiD,EAAEf,QAAQ,GAAGwB,YAAYC,gBAE5B,sBAAK3D,UAAU,YAAf,UACE,uBAAMA,UAAU,kCAAhB,UACG4D,KAAKC,MAAMZ,EAAEa,KAAKC,KADrB,UAGA,sBAAM/D,UAAU,kCAAhB,eACA,uBAAMA,UAAU,6BAAhB,UACG4D,KAAKC,MAAMZ,EAAEa,KAAKE,KADrB,eApBG/C,EAAI,GAVnB,IAAqBiC,QCTRe,MArBf,WACE,OACE,yBACEjE,UAAU,6EADZ,UAQE,4BAAI,SAAO,IAAIoD,MAAOc,cAAgB,0BACtC,mBACElE,UAAU,uBACVmE,KAAK,kCAFP,6BCISC,MAXf,WACE,OACE,sBAAKpE,UAAU,wBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCASqE,MARf,WACE,OACE,cAAC,EAAD,UACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7C,MAAK,YAAkD,IAA/C8C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7E,SAAS8E,eAAe,SAM1BX,M","file":"static/js/main.03b5cac8.chunk.js","sourcesContent":["import { createContext, useContext, useState } from \"react\";\r\n\r\nconst WeatherContext = createContext();\r\nconst defaultCity = \"Aydın\";\r\n\r\nexport const WeatherProvider = ({ children }) => {\r\n  const [selectedCity, setSelectedCity] = useState(defaultCity);\r\n  const values = { selectedCity, setSelectedCity, defaultCity };\r\n\r\n  return (\r\n    <WeatherContext.Provider value={values}>{children}</WeatherContext.Provider>\r\n  );\r\n};\r\nexport const useWeather = () => useContext(WeatherContext);\r\n","import React from \"react\";\r\nimport { useWeather } from \"../context/WeatherContext\";\r\nfunction Header() {\r\n  const providedData = useWeather();\r\n  return (\r\n    <div>\r\n      <h1 className=\"flex items-center justify-center text-center font-bold text-4xl p-5 text-white\">\r\n        7-Day Weather Forecast for {providedData.selectedCity}\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { useEffect } from \"react\";\r\nimport { useWeather } from \"../context/WeatherContext\";\r\nimport { BsFillGeoAltFill } from \"react-icons/bs\";\r\nimport axios from \"axios\";\r\nfunction Dropdown() {\r\n  const selectDOM = document.querySelector(\".citiesInTurkeyList\");\r\n  const citiesInTurkey = [\r\n    \"Adana\",\r\n    \"Adıyaman\",\r\n    \"Afyon\",\r\n    \"Ağrı\",\r\n    \"Amasya\",\r\n    \"Ankara\",\r\n    \"Antalya\",\r\n    \"Artvin\",\r\n    \"Aydın\",\r\n    \"Balıkesir\",\r\n    \"Bilecik\",\r\n    \"Bingöl\",\r\n    \"Bitlis\",\r\n    \"Bolu\",\r\n    \"Burdur\",\r\n    \"Bursa\",\r\n    \"Çanakkale\",\r\n    \"Çankırı\",\r\n    \"Çorum\",\r\n    \"Denizli\",\r\n    \"Diyarbakır\",\r\n    \"Edirne\",\r\n    \"Elazığ\",\r\n    \"Erzincan\",\r\n    \"Erzurum\",\r\n    \"Eskişehir\",\r\n    \"Gaziantep\",\r\n    \"Giresun\",\r\n    \"Gümüşhane\",\r\n    \"Hakkari\",\r\n    \"Hatay\",\r\n    \"Isparta\",\r\n    \"Mersin\",\r\n    \"İstanbul\",\r\n    \"İzmir\",\r\n    \"Kars\",\r\n    \"Kastamonu\",\r\n    \"Kayseri\",\r\n    \"Kırklareli\",\r\n    \"Kırşehir\",\r\n    \"Kocaeli\",\r\n    \"Konya\",\r\n    \"Kütahya\",\r\n    \"Malatya\",\r\n    \"Manisa\",\r\n    \"Kahramanmaraş\",\r\n    \"Mardin\",\r\n    \"Muğla\",\r\n    \"Muş\",\r\n    \"Nevşehir\",\r\n    \"Niğde\",\r\n    \"Ordu\",\r\n    \"Rize\",\r\n    \"Sakarya\",\r\n    \"Samsun\",\r\n    \"Siirt\",\r\n    \"Sinop\",\r\n    \"Sivas\",\r\n    \"Tekirdağ\",\r\n    \"Tokat\",\r\n    \"Trabzon\",\r\n    \"Tunceli\",\r\n    \"Şanlıurfa\",\r\n    \"Uşak\",\r\n    \"Van\",\r\n    \"Yozgat\",\r\n    \"Zonguldak\",\r\n    \"Aksaray\",\r\n    \"Bayburt\",\r\n    \"Karaman\",\r\n    \"Kırıkkale\",\r\n    \"Batman\",\r\n    \"Şırnak\",\r\n    \"Bartın\",\r\n    \"Ardahan\",\r\n    \"Iğdır\",\r\n    \"Yalova\",\r\n    \"Karabük\",\r\n    \"Kilis\",\r\n    \"Osmaniye\",\r\n    \"Düzce\",\r\n  ];\r\n  const providedData = useWeather();\r\n  useEffect(() => {\r\n    const id = citiesInTurkey.findIndex(\r\n      (element) => element === providedData.defaultCity\r\n    );\r\n    document\r\n      .querySelector(\".citiesInTurkeyList\")\r\n      .options[id].setAttribute(\"selected\", \"\");\r\n  });\r\n\r\n  const geoLocation = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      axios(\r\n        `http://api.openweathermap.org/geo/1.0/reverse?lat=${position.coords.latitude}&lon=${position.coords.longitude}&limit=5&appid=66f077be60e3ba7f90d651bb008aaba8`\r\n      ).then((response) => {\r\n        providedData.setSelectedCity(response.data[0].name);\r\n        if (selectDOM) {\r\n          selectDOM.value = response.data[0].name;\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center p-5\">\r\n      <select\r\n        className=\"citiesInTurkeyList font-medium text-black bg-white bg-opacity-80 rounded-lg hover:bg-white focus:outline-none focus:shadow-outline\"\r\n        onChange={(e) => providedData.setSelectedCity(e.target.value)}\r\n      >\r\n        {citiesInTurkey.map((city, i) => (\r\n          <option key={(i += 1)} value={city}>\r\n            {city}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <BsFillGeoAltFill\r\n        className=\"text-white text-opacity-80 text-xl ml-2 hover:text-opacity-100\"\r\n        onClick={geoLocation}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dropdown;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useWeather } from \"../context/WeatherContext\";\r\nfunction WeatherCard() {\r\n  const providedData = useWeather();\r\n  const [coordinates, setCoordinates] = useState([]);\r\n  const [weather, setWeather] = useState([]);\r\n  const apiKey = \"66f077be60e3ba7f90d651bb008aaba8\";\r\n  const cityName = `${providedData.selectedCity}`;\r\n  const cityAPI = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}`;\r\n  const dailyAPI = `https://api.openweathermap.org/data/2.5/onecall?lat=${coordinates.lat}&lon=${coordinates.lon}&exclude=current,minutely,hourly&units=metric&appid=${apiKey}`;\r\n  useEffect(() => {\r\n    axios(cityAPI)\r\n      .then((response) => {\r\n        setCoordinates(response.data.coord);\r\n      })\r\n      .catch((err) => {});\r\n    axios(dailyAPI)\r\n      .then((response) => {\r\n        setWeather(response.data);\r\n      })\r\n      .catch((err) => {});\r\n  }, [cityAPI, dailyAPI]);\r\n  useEffect(() => {\r\n    document.querySelector(\"#card1\") &&\r\n      document.querySelector(\"#card1\").classList.remove(\"bg-opacity-80\");\r\n    document.querySelector(\"#card1\") &&\r\n      document\r\n        .querySelector(\"#card1\")\r\n        .classList.add(\"border-4\", \"border-yellow-200\");\r\n  });\r\n\r\n  function dtConverter(UNIX_TIMESTAMP) {\r\n    var date = new Date(UNIX_TIMESTAMP * 1000).toString().split(\" \")[0];\r\n    return date;\r\n  }\r\n  return (\r\n    <ul className=\"grid xl:grid-cols-8 lg:grid-cols-6 md:grid-cols-4 sm:grid-cols-2 justify-items-stretch text-center\">\r\n      {weather.daily &&\r\n        weather.daily.map((s, i) => (\r\n          <li\r\n            id={`card${i + 1}`}\r\n            key={i + 1}\r\n            className=\"bg-opacity-80 bg-white rounded-xl shadow-md m-2\"\r\n          >\r\n            <div className=\"text-xl font-medium text-black\">\r\n              {dtConverter(s.dt)}\r\n            </div>\r\n            <div className=\"flex items-center justify-center filter drop-shadow-lg\">\r\n              <img\r\n                src={`https://openweathermap.org/img/wn/${s.weather[0].icon}@2x.png`}\r\n                alt=\"weatherImg\"\r\n              />\r\n            </div>\r\n            <div className=\"text-gray-700 font-medium\">\r\n              {s.weather[0].description.toUpperCase()}\r\n            </div>\r\n            <div className=\"font-bold\">\r\n              <span className=\"text-gray-900 inline-block mr-2\">\r\n                {Math.floor(s.temp.min)}º\r\n              </span>\r\n              <span className=\"text-gray-900 inline-block mr-2\">/</span>\r\n              <span className=\"text-gray-500 inline-block\">\r\n                {Math.floor(s.temp.max)}º\r\n              </span>\r\n            </div>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer\r\n      className=\"\r\n             text-white text-center\r\n             fixed\r\n             inset-x-0\r\n             bottom-0\r\n             hidden md:block\"\r\n    >\r\n      <p>{\"© \" + new Date().getFullYear() + \" All Rights Reserved \"}</p>\r\n      <a\r\n        className=\"text-decoration-none\"\r\n        href=\"https://github.com/melihcelik09\"\r\n      >\r\n        @melihcelik\r\n      </a>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport WeatherCard from \"./WeatherCard\";\r\nimport Footer from \"./Footer\";\r\n\r\nfunction Container() {\r\n  return (\r\n    <div className=\"sm:h-screen patternBg\">\r\n      <Header />\r\n      <Dropdown />\r\n      <WeatherCard />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Container;\r\n","import \"./App.css\";\nimport Container from \"./components/Container\";\nimport { WeatherProvider } from \"./context/WeatherContext\";\n\nfunction App() {\n  return (\n    <WeatherProvider>\n      <Container />\n    </WeatherProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}